#
# Flask debug mode
#
#   DEBUG: (True|False)
#
DEBUG = False

#
# Testing flag
#
#   TESTING: (True|False)
#
TESTING = True

#
# Flask secret key
#
#   SECRET_KEY: (any string)
#
SECRET_KEY = '<secret-key>'

#
# Server name
#
SERVER_NAME = 'localhost'

#
# Agent configs:
#
#   AGENT_PACKAGE_LOCAL_PATH: (/path/to/rpm')
#       Use only if you want to install agent on new node from local rpm file with AGENT_INSTALL_FROM_RPM = False
#
#AGENT_API_PREFIX = 'api/v1'
#AGENT_PORT = 17514
#AGENT_PACKAGE_NAME = "pstorage-agent"
#AGENT_INSTALL_FROM_RPM = False
#PSTORAGE_REPO_PACKAGE = "http://download.pstorage.parallels.com/standalone/packages/rhel/7/pstorage-release.noarch.rpm"
PSTORAGE_HOST_ID_PATH = '/etc/pstorage/host_id'
PSTORAGE_AGENT_CONF_PATH = '/etc/pstorage/pstorage-agent.conf'

#
# Database configs:
#
#   SQLALCHEMY_DATABASE_URI: 'postgresql+psycopg2://[user:password@host:port]/test_db'
#
#SQLALCHEMY_POOL_SIZE = 20
#SQLALCHEMY_ECHO = False
SQLALCHEMY_DATABASE_URI = 'postgresql+psycopg2:///vstoradmin'
#SQLALCHEMY_BINDS = {
#	'coredns': 'postgresql+psycopg2:///coredns'
#}

#
# Celery configs:
#
#CELERYBEAT_SCHEDULE = {
#    'fetch-events': {
#        'task': 'backend.tasks.events.fetch_events',
#        'schedule': 30,  # seconds
#    },
#    'collect-stat': {
#        'task': 'backend.tasks.stat.collect_stat',
#        'schedule': 5,  # seconds
#    },
#    'truncate-stat': {
#        'task': 'backend.tasks.stat.truncate_stat',
#        'schedule': 60,  # seconds
#    },
#    'collect-node-state': {
#        'task': 'backend.tasks.node_state.collect_all',
#        'schedule': 30,  # seconds
#    },
#    'services': {
#        'task': 'backend.tasks.services.update',
#        'schedule': 15  # seconds
#    },
#    'network': {
#        'task': 'backend.tasks.network.update',
#        'schedule': 15  # seconds
#    },
#    's3': {
#        'task': 'backend.tasks.s3.update',
#        'schedule': 15  # seconds
#    },
#    's3-stat-truncate': {
#        'task': 'backend.tasks.s3.truncate_stats',
#        'schedule': 24 * 60 * 60  # seconds (every day)
#    },
#    'ssh-keys': {
#        'task': 'backend.tasks.ssh_keys.sync_with_clusters',
#        'schedule': 5 * 60,  # seconds (every 5 minutes)
#        'relative': True,
#    },
#    'nfs': {
#        'task': 'backend.tasks.nfs.update',
#        'schedule': 16,  # seconds
#        'relative': True,
#        'options': {'queue': BACKEND_CELERYBEAT_QUEUE},
#    },
#    'collect_space_histories': {
#        'task': 'backend.tasks.stat.collect_space_histories',
#        'schedule': 3600,  # seconds
#        'relative': True,
#        'options': {'queue': BACKEND_CELERYBEAT_QUEUE},
#    },
#}
#CELERY_TIMEZONE = 'UTC'
#BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'cache'
CELERY_CACHE_BACKEND = 'memory'
#CELERY_RESULT_SERIALIZER = 'backend_json'
#CELERY_TASK_SERIALIZER = 'backend_json'
#CELERY_ACCEPT_CONTENT = ['backend_json']

#
# App session configs
#
#   SESSION_TYPE: (flask|null|redis|memcached|filesystem|mongodb|sqlalchemy):
#       Read docs: https://pythonhosted.org/Flask-Session/#configuration
#
#SESSION_TYPE = 'flask'

#
# Auth configs
#
#   LOGIN_DISABLED: (True|False)
#
LOGIN_DISABLED = True

#
# Logging configs:
#
#   LOGGER_LEVEL: (TRACE|DEBUG|INFO|WRANING|ERROR)
#   LOGGER_FILE: (any path)
#
#ROOT_LOGGER_LEVEL = 'ERROR'
#LOGGER_LEVEL = 'TRACE'
#LOGGER_FILE = None  # To stderr
#CELERY_LOGGER_LEVEL = 'TRACE'
CELERY_PERIODIC_LOGGER_LEVEL = 'TRACE'

#
# Notification configs:
#
#NOTIFIER_EVENTS_DISABLED = True
#NOTIFIER_STAT_DISABLED = True
#NOTIFIER_ADDRESS = '127.0.0.1:8002'
#NOTIFIER_API_PREFIX = '/notifier/api/v1'
NOTIFIER_HMAC_KEY = 'test-notifier-HMAC-key'

#
# Cache configs:
#
#   CACHE_TYPE: (null|simple|memcached|gaememcached|redis|filesystem|saslmemcached)
#   Read docs: https://pythonhosted.org/Flask-Cache/
#
CACHE_TYPE = 'simple'

#
# Memoized configs:
#
#MEMOIZED_TIMEOUT = 10 * 60  # second(s)

#
# Agent Installer path params
#
#PSTORAGE_HOST_ID_PATH = '/etc/pstorage/host_id'
#PSTORAGE_AGENT_CONF_PATH = '/etc/pstorage/pstorage-agent.conf'

#
# Statistics configs
#
STAT_DEPTH = 15  # seconds
#STAT_MAX_STEP = 3  # unit(s) i.e. AbsMaxStep = TaskPeriod * STAT_MAX_STEP

#
# Agent Rest Client Timeouts
#
#AGENT_REST_CLIENT_CONNECT_TIMEOUT = 10  # seconds
#AGENT_REST_CLIENT_READ_TIMEOUT = 15 * 60  # seconds

#
# Ostor cluster confs:
#
#OSTOR_DEFAULT_NNS_PER_NODE = 10
#OSTOR_MAX_NNS = 64
#OSTOR_DEFAULT_NOS_PER_NODE = 10
#OSTOR_NP_API_PREFIX = '/api/v1'

#
# SSL client cert params:
#
#AGENT_SSL_ON = False
#AGENT_SSL_CERT_VERIFY = False
#AGENT_SSL_CLIENT_CERT = '/path/to/client.crt'
#AGENT_SSL_CLIENT_KEY = '/path/to/client.key'
#AGENT_SSL_CA_CERT = '/path/to/ca.crt'
#AGENT_SSL_CA_KEY = '/path/to/ca.key'

#VSTORAGE_PATH = '/etc/vstorage'

#
# Limit max files descriptor (/proc/<pid>/limits), default is 1024
#
MAX_FILES = None

#
# Reports params:
#
CEP_REPORTS_URL = 'http://127.0.0.1:7777/reports'
PROBLEM_REPORTS_URL = 'http://127.0.0.1/post'
#REPORTS_RECIPIENT = 'team-storage@acronis.com'
#REPORTS_HMAC_KEY = '123'
#REPORTS_RESEND_ATTEMPTS = 4
#REPORTS_RESEND_SLEEP = 15 * 60  # seconds
PROBLEM_REPORTS_DIR = '/tmp'

#
# Backup management node params:
#
#BACKUP_SERVICE = 'vstorage-ui-backend-backup'
#BACKUP_DIR = '/mnt/vstorage/webcp/backup/'
#BACKUP_TRIGGER_FILE = '/usr/libexec/vstorage-ui-backend/var/backup-started'
#BACKUP_LAST_TIMESTAMP = '/usr/libexec/vstorage-ui-backend/var/last-backup'
#MANAGEMENT_NODE_BACKUP_TIER = 0

#
# Disk size restrictions for storage services
#
#GB_MULTIPLIER = 1024
#MIN_SYSTEM_DISK_SIZE_FOR_PLACE_MDS = 100 * GB_MULTIPLIER
#MIN_SYSTEM_DISK_SIZE_FOR_PLACE_CS = 100 * GB_MULTIPLIER
#MIN_DISK_SIZE_FOR_PLACE_MDS = 30 * GB_MULTIPLIER
#MIN_DISK_SIZE_FOR_PLACE_CS = 2 * GB_MULTIPLIER
#MIN_JOURNAL_SIZE = 1 * GB_MULTIPLIER
#MAX_JOURNAL_SIZE = 4 * GB_MULTIPLIER
#INNER_JOURNAL_SIZE = 1 * GB_MULTIPLIER
#CHECKSUM_SIZE_FACTOR = 1024

#
# How long backend will wait when node update process finished
#

#NODE_UPDATE_WAIT_TIME = 5 * 60  # in seconds

# AUDIT_LOGS_RECORDS_LIFETIME = 30 * 24 * 60 * 60  # 1 month

#
# If root partition space will be less - fire alert
#

#ROOT_PARTITION_SPACE_THRESHOLD = 0.1

AGENT_SSL_ON = False
AGENT_SSL_CERT_VERIFY = False
AGENT_SSL_CLIENT_CERT = '/usr/libexec/vstorage-ui-backend/ca/client.crt'
AGENT_SSL_CLIENT_KEY = '/usr/libexec/vstorage-ui-backend/ca/client.key'
AGENT_SSL_CA_CERT = '/usr/libexec/vstorage-ui-backend/ca/ca.crt'
AGENT_SSL_CA_KEY = '/usr/libexec/vstorage-ui-backend/ca/ca.key'
AGENT_SSL_CA_DIR = '/usr/libexec/vstorage-ui-backend/ca'
WEBCP_SSL_CERT = '/usr/libexec/vstorage-ui-backend/ca/webcp.crt'
WEBCP_SSL_KEY = '/usr/libexec/vstorage-ui-backend/ca/webcp.key'
GEN_CERTIFICATE_CMD = '/usr/libexec/vstorage-ui-backend/libexec/gen-certificate.sh'
