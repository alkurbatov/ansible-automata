map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

upstream websocket {
    server 127.0.0.1:4000;
}

upstream app_proxy {
    server 127.0.0.1:4000;
}

upstream app_ui {
    server localhost:8080;
}

server {
   # SSL configuration
   listen 8888 ssl http2 default_server;
   listen [::]:8888 ssl http2 default_server;

   server_name pstorage-ui.local;

   ssl_certificate /etc/nginx/ssl/server.crt;
   ssl_certificate_key /etc/nginx/ssl/server.key;

   access_log /var/log/nginx/pstorage.local.access.log;
   error_log /var/log/nginx/pstorage.local.error.log warn;

   location / {
       # development mode
       # root   /root/work/src/git.acronis.com/alkurbatov/pstorage-ui/client;
       # uncomment to test in production mode
       root   /root/work/src/git.acronis.com/alkurbatov/pstorage-ui/client/build/production/Acronis/;
       index  index.html index.htm;
   }

   location /s3 {
       alias /root/work/src/git.acronis.com/alkurbatov/pstorage-ui/client;
       index  index.html index.htm;
   }

   location /api {
       rewrite ^/(.*) /$1 break;
       proxy_redirect off;
       proxy_pass https://app_proxy;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto https;
       proxy_set_header Authorization $http_authorization;
       add_header Access-Control-Allow-Origin *;
       add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
       add_header Access-Control-Allow-Headers  'Origin,X-Requested-With,AcceptAuthorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
       add_header Access-Control-Allow-Credentials true;

       if ($request_method = 'OPTIONS') {
           add_header Access-Control-Allow-Origin *;
           add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
           add_header Access-Control-Max-Age 1728000;
           add_header Content-Type 'text/plain charset=UTF-8';
           add_header Content-Length 0;
           return 204;
       }
   }

   location /ws {
       proxy_pass https://websocket;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection $connection_upgrade;
   }

   # VueJS application
   location /ng {
       proxy_pass https://localhost:8080;
   }

   location /grafana {
       rewrite ^/grafana$ /grafana/ last;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header Host $host:$server_port;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_pass https://app_proxy;
   }

   location ~ ^/prometheus/(.*)$ {
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header Host $host:$server_port;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_redirect off;
       proxy_pass https://app_proxy$1$is_args$args;
   }
}

# subdomains redirect
server {
	listen 8888;# ssl http2;
	listen [::]:8888;# ssl http2;

	server_name *.pstorage-ui.local;

	# SSL
        ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.key;

	return 301 https://pstorage-ui.local$request_uri;
}

# HTTP redirect
server {
	listen 80;
	listen [::]:80;

	server_name .pstorage-ui.local;

	location / {
		return 301 https://pstorage-ui.local$request_uri;
	}
}
